(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["core"] = factory();
	else
		root["core"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.processRules = exports.validateRule = exports.processVerbose = exports.verbosePlugin = exports.processGroup = exports.processRuleOrGroup = exports.internalOperators = exports.processResult = exports.flattenKeys = exports.isGroup = exports.internalOperatorValues = void 0;
exports.internalOperatorValues = ['eq', 'neq', 'gt', 'lt', 'gte', 'lte', 'has', 'nhas', 'in', 'nit'];
const defaultDelimiter = '.';
function isGroup(testRule = {}) {
    const { all, any } = testRule;
    if (all || any)
        return true;
    return false;
}
exports.isGroup = isGroup;
function flattenKeys(obj, prefix = '', delimiter = '.') {
    return Object.entries(obj).reduce((acc, [key, value]) => {
        if (typeof value === 'object' && !Array.isArray(value)) {
            return { ...acc, ...flattenKeys(value, `${prefix}${key}${delimiter}`) };
        }
        return { ...acc, [`${prefix}${key}`]: value };
    }, {});
}
exports.flattenKeys = flattenKeys;
const processResult = ({ pass, facts, rule, group, plugins = [] }) => (plugins.reduce((pluginResult, plugin) => ({ ...pluginResult, ...(plugin({ pass, facts, rule, group }) || {}) }), { pass }));
exports.processResult = processResult;
const in_nit = (operator) => ({ value, term }) => {
    if (Array.isArray(term) || ['string', 'object'].includes(typeof term)) {
        const pass = term.includes(value);
        return operator === 'in' ? pass : !pass;
    }
    return false;
};
const has_nhas = (operator) => ({ value, term }) => {
    if (['number', 'bigint', 'symbol', 'undefined'].includes(typeof value))
        return false;
    const pass = value.includes(term);
    return (operator === 'has') ? pass : !pass;
};
exports.internalOperators = {
    eq: ({ value, term }) => value === term,
    neq: ({ value, term }) => value !== term,
    gt: ({ value, term }) => value > term,
    gte: ({ value, term }) => value >= term,
    lt: ({ value, term }) => value < term,
    lte: ({ value, term }) => value <= term,
    in: in_nit('in'),
    nit: in_nit('nit'),
    has: has_nhas('has'),
    nhas: has_nhas('nhas')
};
function processRuleOrGroup(facts = {}, rule, options = {}) {
    const { plugins = [], operators = {} } = options;
    if (isGroup(rule))
        return processGroup(facts, rule, { plugins });
    const [subject, op, term] = rule;
    if (subject === null || subject === undefined || !op) {
        throw new Error(`Invalid Rule\n${JSON.stringify(rule, null, 2)}`);
    }
    const ruleResult = { pass: false };
    const value = facts?.[subject];
    const valueType = typeof value;
    const termIsObject = typeof term == 'object';
    const termIsRule = termIsObject && isGroup(term);
    const factQuery = {
        value,
        type: valueType,
        queryFields: null
    };
    if (subject.indexOf(defaultDelimiter) > 0) {
        const flatFacts = flattenKeys(facts);
        const queryValue = flatFacts[subject];
        const objType = typeof queryValue;
        if (queryValue) {
            factQuery.value = queryValue;
            factQuery.type = Array.isArray(queryValue) ? 'array' : objType;
        }
    }
    if (termIsRule) {
    }
    const isNumeric = factQuery.type === 'bigint' || factQuery.type === 'number';
    const termValue = isNumeric ? parseInt(term, 10) : term;
    const factValue = factQuery.value;
    if (exports.internalOperators[op]) {
        ruleResult.pass = exports.internalOperators[op]({ value: factValue, term: termValue });
    }
    if (operators[op]) {
        ruleResult.pass = operators[op]({ value: factValue, term: termValue });
    }
    return (0, exports.processResult)({
        ...ruleResult, rule, facts, plugins
    });
}
exports.processRuleOrGroup = processRuleOrGroup;
function processGroup(facts = {}, ruleGroup = {}, options = {}) {
    const { all, any } = ruleGroup;
    const { plugins = [] } = options;
    const action = rule => processRuleOrGroup(facts, rule, options);
    if (all) {
        const groupResult = all.map(action);
        const pass = groupResult.every(r => r.pass);
        return (0, exports.processResult)({ pass, rule: ruleGroup, facts, plugins, group: { all: groupResult, pass } });
    }
    if (any) {
        const groupResult = any.map(action);
        const pass = groupResult.some(r => r.pass);
        return (0, exports.processResult)({ pass, rule: ruleGroup, facts, plugins, group: { any: groupResult, pass } });
    }
    throw new Error(`Invalid RuleGroup\n${JSON.stringify(ruleGroup, null, 2)}`);
}
exports.processGroup = processGroup;
const verbosePlugin = ({ pass, rule, group }) => ({ pass, rule, group });
exports.verbosePlugin = verbosePlugin;
const processVerbose = (facts = {}, ruleGroup, plugins = []) => (processGroup(facts, ruleGroup, { plugins: [exports.verbosePlugin, ...plugins] }));
exports.processVerbose = processVerbose;
function validateRule(ruleGroup = {}) {
    const isValid = false;
    if (!ruleGroup)
        return ({
            isValid,
            message: 'No Rule Group Found'
        });
    const { all, any } = ruleGroup;
    const validateRuleSet = (rules) => {
        if (rules.length === 0)
            return ({
                isValid,
                message: 'No Rule Group Found'
            });
        for (let ruleIndex = 0; ruleIndex < rules.length; ruleIndex++) {
            const ruleGroup = rules[ruleIndex];
            if (ruleGroup?.all || ruleGroup?.any) {
                return validateRule(ruleGroup);
            }
            const rule = ruleGroup;
            if (!Array.isArray(rule) || rule.length < 2)
                return ({
                    isValid,
                    message: 'No Rule Group Found'
                });
            const [field, op] = rule;
            if (!field || !op)
                return ({
                    isValid,
                    message: 'Invalid Rule'
                });
            if (!exports.internalOperatorValues.includes(op))
                return ({
                    isValid,
                    message: 'Invalid Operator'
                });
        }
        return {
            isValid: true
        };
    };
    if (all || any) {
        return validateRuleSet(all || any);
    }
    return ({
        isValid,
        message: 'No Quantifiers (all|any) Found'
    });
}
exports.validateRule = validateRule;
exports.processRules = processGroup;
exports["default"] = exports.processRules;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"](0, __webpack_exports__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,